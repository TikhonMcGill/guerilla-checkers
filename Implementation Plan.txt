Double-Placement Implementation:
	1. Fix Game State (Draws make work)
	2. Fix Animations
	3. Fix for Player
	4. Fix for Minimax

(When Finished)
1. Make Android Build, see if it works, send to HaWo so he can send it to Brian Train 

Optimization (February 23rd to March 1st, 2024):
	1. Instead of calculating different situations in the board game, make them be saved (e.g. instead of 
	going through all pieces on the board and counting number of pieces, save the number of pieces)
	2. Implement Transposition Tables – it is possible that different moves could lead to the same game 
	configuration. Therefore, it would be a good idea to store future moves of a Game State, and looking 
	them up if that configuration appears again. The transposition table will be saved in RAM between 
	games, to allow for tournaments with hundreds of games to be sped up by not having to recalculate 
	many of the same Game States

Testing (March 1st to March 8th, 2024):
	1. Use the application, trying out all features, and noting down any bugs or errors, and fixing them

Phase 3 (March 8th to April 5th)

Running the Experiment (March 8th to March 11th, 2024):
	1. Ensure that there is a set Random Seed, to make any random result reproducible
	2. Carry out the Experiment per the Methodology Section
	Analyzing the Data (March 11th to March 15th, 2024):
	1. Write down the data into tables
	2. Produce meaningful charts from the data tables
	3. Based on the data and charts, produce conclusions

Writeup (March 15th to April 5th, 2024):
	1. Write in the Results and Data Analysis
	2. Report relevant work done using the Progress Log
	3. Write in any new techniques discovered into the Literature Review
	4. Write a conclusion based on the data acquired
	5. Format the Report to be in accordance with guidelines from the Project Handbook
	6. Decide the most important features
	7. Arrange them into relevant categories
	8. Add figures and tables as needed
	9. Print out the Poster

Lower-Priority Requirements(April 5th to April 15th, 2024):
	1. Implement any incomplete “Should Haves”, per the Requirements
	2. Implement any “Could Haves”, per the Requirements

Update to MIT License at project end


Utility Computer Player:
1. For the Guerilla, +10 if the State after the move has less COIN Checker (i.e. one was taken)
2. For the Guerilla, -1 for every Guerilla Piece threatened (which means +1 if it’s placed in a diagonal between 2 COIN Checkers, and a -1 if it’s threatened, obviously)
3. For the Guerilla, +100 if they are Victorious (meaning taking the last Checker gives +100 Utility)
4. For the Guerilla, +5 for every threatened COIN Checker (by Edge OR Guerilla piece)
5. For the Counterinsurgent, -1 for every Guerilla Piece present on the board (so that taking it, and it implies that taking it at once is also +1 for each, gives +1 point) 
6. For the Counterinsurgent, +100 for Victory (which means taking the last piece gives +100 Utility, just as the Guerilla running out of pieces will give +100 points as well, but the COIN player can’t look ahead that far)
7. For the Counterinsurgent, -5 for every edge-threatened Checker
8. For the Counterinsurgent, -5 for every Guerilla-threatened Checker
9. For the Counterinsurgent, -5 for every Checker in a corner 
(this is automatically handled by the "count_edge_threatened_coin_checkers" method 
in GameStateAnalyzer, since for every Checker in a Corner, +1 is added to the count)
10. For every possible move, simulate it using GameStateAnalyzer's "simulate_move" method, and assign a utility to it, the sum of the above
situations
11. Pick the Move with the highest utility, OR randomly-choose top moves if utilities are tied
12. The UCP doesn't have a utility for the opposing player winning, because they cannot look into the future

The Rules-Based Computer Player(RBCP) plays as follows:
	1. For every possible move, the RBCP assigns a value of “utility” to it, the sum of situations 
	described below
	2. The RBCP then picks the move with the best Utility
	3. If there are several moves with the best Utility, the RBCP picks randomly among them
	
	Utilities for an RBCP playing as a Guerilla:
	1. +10 to take a Counterinsurgent Checker 
	2. +1 to place a piece in a corner diagonally between two Counterinsurgent Checkers
	3. +100 to take the last Counterinsurgent Checker
	4. +1 to place a piece if it threatens one of the Counterinsurgent's Checkers
	5. -1 to place a piece if it is threatened by one of the Counterinsurgent's Checkers
	
	Utilities for an RBCP playing as a Counterinsurgent:
	1. +1 for every Guerilla Piece it can take at once
	2. +100 to take the last Guerilla Piece
	3. -5 to move a checker to the edge of the board
	4. -10 to move a checker to the corner of the board

FR-6: The User shall be able to run a “Tournament”
	FR-6.1: The User shall be able to, in the Main Menu, specify the number of games to be played in a 
	Tournament
	FR-6.3: The System shall alternate the player sides in each round of the Tournament (e.g. a Human plays a 
	Guerilla in one round, and a Counterinsurgent in the next)
	FR-6.3: The System shall show the final result (how many games each player won as each side) when all 
	games are played

FR-8: The System Shall Log Games
	FR-8.1: As each move is taken, the System shall keep a “log” of the game, which it saves on disk
	FR-8.2: The User shall be able to access these logs, the game replayed in accordance with it
	FR-8.3: For Tournaments, only the Opening Move and Winning Move will be saved
	Priority: Should Have

NFR-3: A Minimax Player playing at Cutoff Depth 10 shall take at most 10 seconds to move
	NFR-3.1: The Minimax Algorithm will keep track of the best move to take, given the current search result
	NFR-3.2: It will have a timeout of 10 seconds to carry out its search and, if it does not complete the search, it 
	will pick the best move so far

NFR-5: There shall be an adjustable Evaluation Function that Minimax Algorithm will use to evaluate states
	NFR-5.1: The Evaluation Function will produce a total utility, using these 8 Evaluation Parameters:
		1. Victory Utility – This is added to Utility if there are no Counterinsurgent Checkers on the board
		2. Defeat Utility – This is added to Utility if there are no Guerilla Pieces present on the board, or 
		the Guerilla has no pieces to place
		3. Pieces Left Utility – Number of Pieces the Guerilla has left multiplied by this, and added to total 
		Utility
		4. Pieces on Board Utility – Number of Guerilla Pieces present on board multiplied by this amount 
		and added to total Utility
		5. Checkers Utility – Number of Counterinsurgent Checkers present on board multiplied by this 
		and added to total Utility
		6. Guerilla-Threatened Checkers Utility – Number of Counterinsurgent Checkers “threatened” by 
		the Guerilla’s Pieces (2 Guerilla Pieces next to each other in corners of a square where a 
		Counterinsurgent Checker is present) multiplied by this and added to total Utility
		7. Edge-Threatened Checkers Utility – Number of Counterinsurgent Checkers present on the edge 
		of the board multiplied by this and added to total Utility
		8. Threatened Guerilla Pieces Utility – Number of Guerilla Pieces threatened by the 
		Counterinsurgent’s Checkers (a piece is in a corner without another piece next to it, in a corner 
		of a square with a Counterinsurgent Checker present) multiplied by this and added to total 
		Utility
	NFR-5.2: If any of the above parameters are zero, as an optimization, the Evaluation Function will not check 
	for situations related to those parameters

NFR-14: Steps will be taken to improve the System’s Accessibility
	NFR-15.1: A Color palette for graphics will be selected that is suitable for colorblind people
	NFR-15.2: Parameters of the Minimax Implementation will be explained to those wishing to create a Minimax Profile

NFR-16: Future Move Calculation Shall be Optimized using Transposition Tables
	NFR-16.1: When future moves of a Game State are looked at, they are added to a Transposition Table
	NFR-16.2: If that Game State is reached again, instead of recalculating moves, they will be looked up in the 
	Table
	NFR-16.3: The Transposition Table will be saved between games, so that (particularly in tournaments with 
	hundreds of games) time is saved in calculating moves

Lower-Priority Requirements:
	1. NFR-15.3: The System shall be explicit about the presence of a tutorial, for those who are unaware of the 
	rules of Guerilla Checkers
	2. NFR-7: The System should provide visual feedback to the User about possible moves
		NFR-7.1: As a Counterinsurgent, the square(s) the User can move to will be highlighted
		NFR-7.2: As a Guerilla, the corners into which the User can place their next piece will be highlighted
	3. NFR-6: The System shall provide visual feedback to the User about the opponent’s actions
		NFR-6.1: There shall be animations for placing, moving and taking pieces
	4. FR-7: The System shall provide an Interactive Tutorial
		FR-7.1: Users shall be able to, if one of the sides’ players is Human, activate a “Tutorial” setting
		FR-7.2: When active, Users shall be explained the outcomes of possible moves they could take

Make sure to explain how to leave the game - press ESCAPE
Consider making Colors customizable for board and pieces (and if I do so, mention in dissertation how that's a good accessibility step)
Could optionally label cells and corners in main menu
Consider emphasizing first Guerilla-placed piece (e.g. different color)
Consider simplifying the end game string if the player is already named COIN/Counterinsurgent
or Guerilla - e.g. "The Guerilla(Guerilla) was Victorious" could become "The Guerilla was Victorious"

Minimax Profile Editor:
	Add explanations for each Evaluation Function
	Add explanations for Sorting Algorithms
