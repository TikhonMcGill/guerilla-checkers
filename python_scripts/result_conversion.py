import pandas as pd
import os

#The Purpose of this Script is to convert a folder of the Text Files Generated by the Application after a Rapid Tournament into a CSV,
#which would be easier to work with

def convert_file(file_path : str) -> tuple:
    #Initialize all variables
    guerilla_name = pd.NA
    coin_name = pd.NA
    total_games = pd.NA
    
    guerilla_victories = pd.NA
    total_coin_victories = pd.NA
    coin_capture_victories = pd.NA
    coin_runout_victories = pd.NA
    draws = pd.NA

    mean_turns_per_game = pd.NA
    mean_guerilla_victory_turns = pd.NA
    mean_coin_victory_turns = pd.NA
    mean_draw_turns = pd.NA

    mean_coin_checkers_per_victory = pd.NA
    mean_coin_checkers_per_draw = pd.NA

    time_for_tournament = pd.NA
    time_per_game = pd.NA

    mean_guerilla_branching_factor = pd.NA
    mean_coin_branching_factor = pd.NA
    
    f = open(file_path,"r")
    lines = f.read().splitlines()
    f.close()

    #Go through Lines of file, which all have the same string notation, and extract variables from them
    #Play a Rapid Tournament and save the results to get the notation

    for line in lines:
        #When I was doing the experiment, I ended all of my tested profiles' names with either "Guerilla" or "COIN", and
        #I shortened "Utility Computer Player" to UCP. The code assumes this - if that notation isn't followed, edit as necessary
        if line.startswith("Guerilla: ") == True:
            guerilla_line = line.replace("Guerilla: ","")

            if guerilla_line.endswith(" Guerilla") == True:
                guerilla_line = guerilla_line.replace(" Guerilla","")

            guerilla_name = guerilla_line.replace("UCP","Utility Computer Player")
        elif line.startswith("COIN: ") == True:
            coin_line = line.replace("COIN: ","")

            if coin_line.endswith(" COIN") == True:
                coin_line = coin_line.replace(" COIN","")
            
            coin_name = coin_line.replace("UCP","Utility Computer Player")
        elif line.startswith("Total no. Games: ") == True:
            total_games = int(line.replace("Total no. Games: ",""))
        elif line.startswith("Total Time taken for Tournament: ") == True:
            time_line = line.replace("Total Time taken for Tournament: ","")
            time_line = time_line.split(" ")[0]
            time_line = time_line.replace("ms","")
            time_for_tournament = int(time_line)
            time_per_game = float(time_for_tournament) / total_games
        elif line.startswith("Mean no. Turns per Game: ") == True:
            mean_turns_per_game = float(line.replace("Mean no. Turns per Game: ",""))
        elif line.startswith("Guerilla Victories: ") == True:
            guerilla_victories = int(line.replace("Guerilla Victories: ",""))
        elif line.startswith("Total COIN Victories: ") == True:
            total_coin_victories = int(line.replace("Total COIN Victories: ",""))
        elif line.startswith("COIN Victories by Capturing: ") == True:
            coin_capture_victories = int(line.replace("COIN Victories by Capturing: ",""))
        elif line.startswith("COIN Victories by Guerilla Running out of Pieces: ") == True:
            coin_runout_victories = int(line.replace("COIN Victories by Guerilla Running out of Pieces: ",""))
        elif line.startswith("Draws: ") == True:
            draws = int(line.replace("Draws: ",""))
        elif line.startswith("Mean Branching Factor for Guerilla: ") == True:
            mean_guerilla_branching_factor = float(line.replace("Mean Branching Factor for Guerilla: ",""))
        elif line.startswith("Mean Branching Factor for COIN: ") == True:
            mean_coin_branching_factor = float(line.replace("Mean Branching Factor for COIN: ",""))
        elif line.startswith("Mean Turn of Guerilla Victory: ") == True:
            mean_guerilla_victory_turns = float(line.replace("Mean Turn of Guerilla Victory: ",""))
        elif line.startswith("Mean Turn of COIN Victory: ") == True:
            mean_coin_victory_turns = float(line.replace("Mean Turn of COIN Victory: ",""))
        elif line.startswith("Mean Turn of Draw: ") == True:
            mean_draw_turns = float(line.replace("Mean Turn of Draw: ",""))
        elif line.startswith("Mean no. COIN Checkers left per COIN Victory: ") == True:
            mean_coin_checkers_per_victory = float(line.replace("Mean no. COIN Checkers left per COIN Victory: ",""))
        elif line.startswith("Mean no. COIN Checkers left per Draw: ") == True:
            mean_coin_checkers_per_draw = float(line.replace("Mean no. COIN Checkers left per Draw: ",""))
    
    #Return the Variables as a Tuple
    return (guerilla_name, coin_name, total_games,
            guerilla_victories,total_coin_victories,coin_capture_victories,coin_runout_victories,draws,
            mean_turns_per_game,mean_guerilla_victory_turns,mean_coin_victory_turns,mean_draw_turns,
            mean_coin_checkers_per_victory,mean_coin_checkers_per_draw,
            time_for_tournament,time_per_game,
            mean_guerilla_branching_factor,mean_coin_branching_factor)

def convert_folder(path : str) -> pd.DataFrame:
    files = os.listdir(path)
    
    all_guerillas = []
    all_coins = []
    all_total_games = []
    all_guerilla_victories = []
    all_coin_victories = []
    all_coin_capture_victories = []
    all_coin_runout_victories = []
    all_draws = []
    all_mean_turns_per_game = []
    all_mean_guerilla_victory_turns = []
    all_mean_coin_victory_turns = []
    all_mean_draw_turns = []
    all_mean_coin_checkers_per_victory = []
    all_mean_coin_checkers_per_draw = []
    all_tournament_times = []
    all_times_per_game = []
    all_mean_guerilla_branching_factors = []
    all_mean_coin_branching_factors = []

    for file in files:
        (guerilla_name, coin_name, total_games,
        guerilla_victories,total_coin_victories,coin_capture_victories,coin_runout_victories,draws,
        mean_turns_per_game,mean_guerilla_victory_turns,mean_coin_victory_turns,mean_draw_turns,
        mean_coin_checkers_per_victory,mean_coin_checkers_per_draw,
        time_for_tournament,time_per_game,
        mean_guerilla_branching_factor,mean_coin_branching_factor) = convert_file(path+"/"+file)

        all_guerillas.append(guerilla_name)
        all_coins.append(coin_name)
        all_total_games.append(total_games)
        all_guerilla_victories.append(guerilla_victories)
        all_coin_victories.append(total_coin_victories)
        all_coin_capture_victories.append(coin_capture_victories)
        all_coin_runout_victories.append(coin_runout_victories)
        all_draws.append(draws)
        all_mean_turns_per_game.append(mean_turns_per_game)
        all_mean_guerilla_victory_turns.append(mean_guerilla_victory_turns)
        all_mean_coin_victory_turns.append(mean_coin_victory_turns)
        all_mean_draw_turns.append(mean_draw_turns)
        all_mean_coin_checkers_per_victory.append(mean_coin_checkers_per_victory)
        all_mean_coin_checkers_per_draw.append(mean_coin_checkers_per_draw)
        all_tournament_times.append(time_for_tournament)
        all_times_per_game.append(time_per_game)
        all_mean_guerilla_branching_factors.append(mean_guerilla_branching_factor)
        all_mean_coin_branching_factors.append(mean_coin_branching_factor)

    dictionary = {
        "Guerilla Player" : all_guerillas,
        "COIN Player" : all_coins,
        "Total Games" : all_total_games,
        "Guerilla Victories" : all_guerilla_victories,
        "Total COIN Victories" : all_coin_victories,
        "COIN Capture Victories" : all_coin_capture_victories,
        "COIN Runout Victories" : all_coin_runout_victories,
        "Draws" : all_draws,
        "Mean Turns Per Game" : all_mean_turns_per_game,
        "Mean Turns per Guerilla Victory" : all_mean_guerilla_victory_turns,
        "Mean Turns per COIN Victory" : all_mean_coin_victory_turns,
        "Mean Turns per Draw" : all_mean_draw_turns,
        "Mean COIN Checkers left per COIN Victory" : all_mean_coin_checkers_per_victory,
        "Mean COIN Checkers left per Draw" : all_mean_coin_checkers_per_draw,
        "Tournament Time (ms)" : all_tournament_times,
        "Time Per Game (ms)" : all_times_per_game,
        "Mean Guerilla Branching Factor" : all_mean_guerilla_branching_factors,
        "Mean COIN Branching Factor" : all_mean_coin_branching_factors
    }

    return pd.DataFrame(dictionary)